
divorce_character_interaction = {
	category = interaction_category_diplomacy
	use_diplomatic_range = no
	icon = interaction_divorce
	desc = divorce_character_interaction_desc

	cost = {
		piety = divorce_cost
	}

	is_shown = {
		scope:actor.faith = {
			# We are not required to seek approval of a spiritual HoF
			NAND = {
				has_doctrine = doctrine_divorce_approval
				has_doctrine = doctrine_spiritual_head
				exists = religious_head
			}
			# We are not required to seek approval of a house head
			NAND = {
				has_doctrine = doctrine_divorce_approval
				exists = scope:actor.house
				exists = scope:actor.house.house_head
				scope:actor = { is_house_head = no }
			}
		}
		scope:recipient = {
			is_spouse_of = scope:actor
			is_concubine = no # Can set aside Concubines at any time
		}
	}

	is_valid_showing_failures_only = {
		custom_tooltip = {
			NOT = {
				scope:actor.culture = {
					has_cultural_parameter = cannot_divorce
				}
			}
			text = CULTURE_FORBIDS_DIVORCE
		}
		NOT = {
			scope:actor.faith = {
				has_doctrine = doctrine_divorce_disallowed
			}
		}
		scope:recipient = { is_busy_in_events_localised = yes }
		scope:recipient = { NOT = { has_strong_hook = scope:actor } }
	}

	auto_accept = yes

	on_accept = {
		scope:actor = {
			divorce_effect = {
				DIVORCER = scope:actor
				DIVORCEE = scope:recipient
			}
			if = {
				limit = {
					allowed_concubines = yes
				}
				custom_tooltip = divorce_cannot_concubine_ex_wife
			}
		}
		scope:recipient = {
			trigger_event = marriage_interaction.0030
		}
	}
	
	# AI
	ai_targets = {
		ai_recipients = spouses
	}
	ai_frequency = 36
	
	ai_potential = {
		is_ruler = yes
	}

	ai_will_do = {
		base = 0

		modifier = { # The AI wants to divorce should they not have an heir that is their own child, and their spouse is infertile
			add = 100
			scope:actor = {
				fertility > 0.1
				NOT = {
					any_child = {
						is_heir_of = scope:actor
					}
				}
			}
			scope:recipient = {
				is_ai = yes
				fertility < 0.1
			}
		}

		modifier = { # The AI will divorce if they're in a same-sex marriage and their faith changes its stance on the topic
			add = 100
			scope:actor = {
				sex_same_as = scope:recipient
				allowed_to_marry_same_sex_trigger = no
			}
		}
	}
}

divorce_character_house_head_interaction = {
	category = interaction_category_diplomacy
	use_diplomatic_range = no
	icon = interaction_divorce
	cost = {
		piety = divorce_cost
	}

	redirect = {
		scope:recipient = {
			save_scope_as = secondary_recipient
		}
		if = {
			limit = {
				exists = scope:actor.house.house_head
			}
			scope:actor.house.house_head = {
				save_scope_as = recipient
			}
		}
	}

	greeting = positive
	notification_text = ASK_FOR_DIVORCE_NOTIFICATION

	is_shown = {
		exists = scope:actor.house.house_head
		NOT = { scope:actor = scope:actor.house.house_head } # no need to ask yourself
		scope:actor.faith = {
			has_doctrine = doctrine_divorce_approval
		}
		NAND = {
			exists = scope:actor.faith.religious_head
			scope:actor.faith = {
				has_doctrine = doctrine_spiritual_head
			}
		}
		scope:secondary_recipient = {
			is_spouse_of = scope:actor
			is_concubine = no # Can set aside Concubines at any time
		}
	}

	is_valid_showing_failures_only = {
		# Denounced trait?
		scope:recipient = { is_busy_in_events_localised = yes }
		scope:secondary_recipient = { is_busy_in_events_localised = yes }
		custom_tooltip = {
			NOT = {
				scope:actor.culture = {
					has_cultural_parameter = cannot_divorce
				}
			}
			text = CULTURE_FORBIDS_DIVORCE
		}
		NOT = {
			scope:secondary_recipient = { has_strong_hook = scope:actor }
		}
	}
	
	ai_accept = {
		base = 0 # Should be 0 for all interactions
		
		divorce_character_ai_accept_modifier = yes
		
		modifier = { # Infertility
			add = 20
			desc = DIVORCE_INFERTILE
			scope:actor = {
				fertility > 0.1
			}
			scope:secondary_recipient = {
				fertility < 0.1
				NOR = {
					any_child = {
						is_child_of = scope:actor
					}
					has_trait = eunuch
				}
			}
		}
		
		modifier = { # Negative for having given you children
			add = -50
			desc = DIVORCE_GIVEN_CHILDREN
			scope:secondary_recipient = {
				any_child = {
					count >= 3
					is_child_of = scope:actor
					AND = {
						exists = dynasty
						dynasty = scope:actor.dynasty
					}
				}
			}
		}
		
		modifier = { # They are of the same dynasty as the House Head
			trigger = { NOT = { scope:recipient = scope:secondary_recipient } }
			add = -10
			desc = THEY_ARE_MY_DYNASTY_MEMBER
			scope:recipient = {
				is_lowborn = no
				exists = dynasty
				NOR = {
					is_cousin_of = scope:secondary_recipient
					is_close_or_extended_family_of = scope:secondary_recipient
				}
				dynasty = scope:secondary_recipient.dynasty
				NOR = {
					house = scope:secondary_recipient.house
					is_close_or_extended_family_of = scope:actor
					is_cousin_of = scope:actor
					is_child_of = scope:actor
					AND = {
						exists = scope:actor.dynasty
						scope:recipient.dynasty = scope:actor.dynasty
					}
				}
			}
		}
		
		modifier = { # They are of the same house as the House Head
			trigger = { NOT = { scope:recipient = scope:secondary_recipient } }
			add = -20
			desc = THEY_ARE_MY_HOUSE_MEMBER
			scope:recipient = {
				is_lowborn = no
				NOR = {
					is_cousin_of = scope:secondary_recipient
					is_close_or_extended_family_of = scope:secondary_recipient
				}
				house = scope:secondary_recipient.house
				NOR = {
					house = scope:actor.house
					is_close_or_extended_family_of = scope:actor
					is_cousin_of = scope:actor
					is_child_of = scope:actor	
					scope:recipient.house = scope:actor.house
				}
			}
		}
		
		modifier = { # They are close kin to the House Head
			trigger = { NOT = { scope:recipient = scope:secondary_recipient } }
			add = -35
			desc = THEY_ARE_MY_CLOSE_KIN
			scope:recipient = {
				OR = {
					is_cousin_of = scope:secondary_recipient
					is_close_or_extended_family_of = scope:secondary_recipient
				}
			}
		}
		
		modifier = {
			add = intimidated_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		
		modifier = {
			add = intimidated_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}

		modifier = { # You're in a same-sex marriage and your faith doesn't allow it
			add = 100
			desc = SAME_SEX_MARRIAGE_FAITH_REASON_ACTOR
			scope:actor.faith = scope:recipient.faith
			scope:actor = {
				sex_same_as = scope:secondary_recipient
				allowed_to_marry_same_sex_trigger = no
			}
		}

		modifier = { # You're in a same-sex marriage and their faith doesn't allow it
			add = 100
			desc = SAME_SEX_MARRIAGE_FAITH_REASON
			scope:secondary_recipient.faith = scope:recipient.faith
			scope:secondary_recipient = {
				sex_same_as = scope:actor
				allowed_to_marry_same_sex_trigger = no
			}
		}
	}

	auto_accept = {
		custom_description = {
			text = "spending_hook"
			subject = scope:actor
			object = scope:recipient
			scope:divorce_hook = yes
		}
	}
	
	send_option = {
		is_shown = {
			NOT = { scope:actor = scope:recipient }
		}
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = divorce_hook
		localization = GENERIC_SPEND_A_HOOK
	}	
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	
	send_options_exclusive = no
	
	ai_min_reply_days = 1
	ai_max_reply_days = 5

	on_accept = {
		if = {
			limit = { always = scope:divorce_hook }
			scope:actor = {
				if = {
					limit = {
						has_usable_hook = scope:recipient
					}
					use_hook = scope:recipient
				}
			}
		}
		if = {
			limit = {
				scope:actor = scope:actor.house.house_head
			}
			scope:actor = {
				divorce_effect = {
					DIVORCER = scope:actor
					DIVORCEE = scope:secondary_recipient
				}
			}
		}
		else = {
			show_as_tooltip = {
				scope:actor = {
					divorce_effect = {
						DIVORCER = scope:actor
						DIVORCEE = scope:secondary_recipient
					}
				}
			}
			scope:actor = {
				trigger_event = religious_interaction.2
			}
		}
	}

	on_decline = {
		send_interface_toast = {
			title = divorce_character_rel_head_interaction_decline_notification

			right_icon = scope:actor.house.house_head
		}
	}
	
	# AI
	ai_targets = {
		ai_recipients = spouses
	}
	ai_frequency = 36
	
	ai_potential = {
		is_ruler = yes
	}

	ai_will_do = {
		base = 0

		modifier = { # The AI wants to divorce should they not have an heir that is their own child, and their spouse is infertile
			add = 100
			scope:actor = {
				fertility > 0.1
				NOT = {
					any_child = {
						is_heir_of = scope:actor
					}
				}
			}
			scope:secondary_recipient = {
				is_ai = yes
				fertility < 0.1
			}
		}
		
		modifier = { # The AI will only use a Hook if they couldn't otherwise do this
			scope:divorce_hook = yes
			add = -1
		}

		modifier = { # You're in a same-sex marriage and your faith doesn't allow it
			add = 100
			scope:actor = {
				sex_same_as = scope:secondary_recipient
				allowed_to_marry_same_sex_trigger = no
			}
		}
	}
}

divorce_character_rel_head_interaction = {
	category = interaction_category_diplomacy
	use_diplomatic_range = no
	icon = interaction_divorce
	cost = {
		piety = divorce_cost
	}

	redirect = {
		scope:recipient = {
			save_scope_as = secondary_recipient
		}

		if = {
			limit = {
				exists = scope:actor.faith.religious_head
			}
			scope:actor.faith.religious_head = {
				save_scope_as = recipient
			}
		}
	}

	greeting = positive
	notification_text = ASK_FOR_DIVORCE_NOTIFICATION

	is_shown = {
		exists = scope:actor.faith.religious_head
		scope:actor.faith = {
			has_doctrine = doctrine_spiritual_head
			has_doctrine = doctrine_divorce_approval
		}
		scope:secondary_recipient = {
			is_spouse_of = scope:actor
			is_concubine = no # Can set aside Concubines at any time
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			NOT = { has_trait = excommunicated }
		}
		scope:recipient = { is_busy_in_events_localised = yes }
		scope:secondary_recipient = { is_busy_in_events_localised = yes }
		custom_tooltip = {
			NOT = {
				scope:actor.culture = {
					has_cultural_parameter = cannot_divorce
				}
			}
			text = CULTURE_FORBIDS_DIVORCE
		}
		NOT = {
			scope:secondary_recipient = { has_strong_hook = scope:actor }
		}
	}

	ai_accept = {
		base = 0 # Should be 0 for all interactions
		
		divorce_character_ai_accept_modifier = yes

		modifier = { # Divine Family is part of the faith
			add = -100
			desc = DIVORCE_INCESTUOUS

			scope:actor = { 
				is_close_or_extended_family_of = scope:secondary_recipient
				faith = { has_doctrine = tenet_divine_marriage }
			}
		}
		
		modifier = { # More likely if the marriage is incestuous, unless Divine Family is part of the faith
			add = 100
			desc = DIVORCE_INCESTUOUS

			scope:actor = {
				relation_with_character_is_incestuous_in_my_faith_trigger = { CHARACTER = scope:secondary_recipient	}
			}
		}		
		
		modifier = { # They are of the same dynasty as the Head of Faith
			add = -5
			desc = THEY_ARE_MY_DYNASTY_MEMBER
			scope:recipient = {
				is_lowborn = no
				exists = dynasty
				exists = scope:secondary_recipient.dynasty
				dynasty = scope:secondary_recipient.dynasty
				NOR = {
					house = scope:secondary_recipient.house
					is_close_or_extended_family_of = scope:actor
					is_cousin_of = scope:actor
					is_child_of = scope:actor	
					scope:recipient.dynasty = scope:actor.dynasty
				}
			}
		}
		
		modifier = { # You are of the same dynasty as the Head of Faith
			add = 5
			desc = YOU_ARE_MY_DYNASTY_MEMBER
			scope:recipient = {
				is_lowborn = no
				exists = dynasty
				exists = scope:actor.dynasty
				dynasty = scope:actor.dynasty
				NOR = {
					is_close_or_extended_family_of = scope:actor
					is_cousin_of = scope:actor
					is_child_of = scope:actor
					scope:recipient.dynasty = scope:secondary_recipient.dynasty
				}
			}
		}
		
		modifier = { # They are of the same house as the Head of Faith
			add = -10
			desc = THEY_ARE_MY_HOUSE_MEMBER
			scope:recipient = {
				is_lowborn = no
				exists = house
				exists = scope:secondary_recipient.house
				house = scope:secondary_recipient.house
				NOR = {
					house = scope:actor.house
					is_close_or_extended_family_of = scope:actor
					is_cousin_of = scope:actor
					is_child_of = scope:actor	
					scope:recipient.house = scope:actor.house
				}
			}
		}
		
		modifier = { # You are of the same house as the Head of Faith
			add = 10
			desc = YOU_ARE_MY_HOUSE_MEMBER
			scope:recipient = {
				is_lowborn = no
				exists = house
				exists = scope:actor.house
				house = scope:actor.house
				NOR = {
					is_close_or_extended_family_of = scope:actor
					is_cousin_of = scope:actor
					is_child_of = scope:actor
					scope:recipient.house = scope:secondary_recipient.house
				}
			}
		}
		
		modifier = { # Related to the Head of Faith
			add = 25
			desc = YOU_ARE_MY_RELATIVE
			scope:recipient = {
				OR = {
					is_close_or_extended_family_of = scope:actor
					is_cousin_of = scope:actor
				}
				NOT = { is_child_of = scope:actor }
			}
		}
		
		modifier = { # Parent of the Head of Faith
			add = 50
			desc = PARENTS #YOU_ARE_MY_PARENT
			scope:recipient = {
				is_child_of = scope:actor
			}
		}
		
		modifier = {
			add = {
				add = 10
				multiply = scope:actor.num_virtuous_traits
			}
			scope:actor.num_virtuous_traits > 0
			desc = I_AM_VIRTUOUS
		}
		
		modifier = {
			add = {
				add = -10
				multiply = scope:secondary_recipient.num_virtuous_traits
			}
			scope:secondary_recipient.num_virtuous_traits > 0
			desc = THEY_ARE_VIRTUOUS
		}
		
		modifier = {
			add = {
				add = -10
				multiply = scope:actor.num_sinful_traits
			}
			scope:actor.num_sinful_traits > 0
			desc = I_AM_SINFUL
		}
		
		modifier = {
			add = {
				add = 10
				multiply = scope:secondary_recipient.num_sinful_traits
			}
			scope:secondary_recipient.num_sinful_traits > 0
			desc = THEY_ARE_SINFUL
		}

		modifier = { # You're in a same-sex marriage and your faith doesn't allow it
			add = 100
			desc = SAME_SEX_MARRIAGE_FAITH_REASON_ACTOR
			scope:actor.faith = scope:recipient.faith
			scope:actor = {
				sex_same_as = scope:secondary_recipient
				allowed_to_marry_same_sex_trigger = no
			}
		}

		modifier = { # You're in a same-sex marriage and their faith doesn't allow it
			add = 100
			desc = SAME_SEX_MARRIAGE_FAITH_REASON
			scope:secondary_recipient.faith = scope:recipient.faith
			scope:secondary_recipient = {
				sex_same_as = scope:actor
				allowed_to_marry_same_sex_trigger = no
			}
		}
	}
	
	auto_accept = {
		custom_description = {
			text = "spending_hook"
			subject = scope:actor
			object = scope:recipient
			scope:divorce_hook = yes
		}
	}
	
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = divorce_hook
		localization = GENERIC_SPEND_A_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	
	send_options_exclusive = no
	
	ai_min_reply_days = 1
	ai_max_reply_days = 5

	on_accept = {
		if = {
			limit = { always = scope:divorce_hook }
			scope:actor = {
				if = {
					limit = {
						has_usable_hook = scope:recipient
					}
					use_hook = scope:recipient
				}
			}
		}
		show_as_tooltip = {
			scope:actor = {
				divorce_effect = {
					DIVORCER = scope:actor
					DIVORCEE = scope:secondary_recipient
				}
			}
		}
		scope:actor = {
			trigger_event = religious_interaction.1
		}
	}

	on_decline = {
		send_interface_toast = {
			title = divorce_character_rel_head_interaction_decline_notification

			right_icon = scope:actor.faith.religious_head
		}
	}
	
	# AI
	ai_targets = {
		ai_recipients = spouses
	}
	ai_frequency = 36
	
	ai_potential = {
		is_ruler = yes
	}

	ai_will_do = {
		base = 0

		modifier = { # The AI wants to divorce should they not have an heir that is their own child, and their spouse is infertile
			add = 100
			scope:actor = {
				fertility > 0.1
				NOT = {
					any_child = {
						is_heir_of = scope:actor
					}
				}
			}
			scope:secondary_recipient = {
				is_ai = yes
				fertility < 0.1
			}
		}
		
		modifier = { # The AI will only use a Hook if they couldn't otherwise do this
			scope:divorce_hook = yes
			add = -1
		}

		modifier = { # You're in a same-sex marriage and your faith doesn't allow it
			add = 100
			scope:actor = {
				sex_same_as = scope:secondary_recipient
				allowed_to_marry_same_sex_trigger = no
			}
		}
	}	
}

divorce_character_dynast_request_interaction = {
	category = interaction_category_diplomacy
	use_diplomatic_range = no
	icon = interaction_divorce
	desc = divorce_character_dynast_request_interaction_desc

	cost = {
		piety = divorce_cost
		renown = minor_dynasty_prestige_value
	}

	redirect = {
		scope:recipient = {
			save_scope_as = secondary_actor
		}

		if = {
			limit = {
				exists = scope:recipient.primary_spouse
			}
			scope:recipient.primary_spouse = {
				save_scope_as = recipient
			}
		}
	}

	is_shown = {
		NOT = { scope:secondary_actor = scope:actor }
		scope:secondary_actor.dynasty.dynast = scope:actor

		scope:actor.faith = {
			# We are not required to seek approval of a spiritual HoF
			NAND = {
				has_doctrine = doctrine_divorce_approval
				has_doctrine = doctrine_spiritual_head
				exists = religious_head
			}
		}
		OR = {
			AND = {
				NOT = { scope:actor.faith = scope:secondary_actor.faith }
				# They are not required to seek approval of a spiritual HoF of the Dynasty Member
				scope:secondary_actor.faith = {
					NOT = {
						has_doctrine = doctrine_divorce_approval
					}
				}
			}
			scope:actor.faith = scope:secondary_actor.faith
		}
		
		scope:recipient = {
			is_spouse_of = scope:secondary_actor
			is_concubine = no # Can set aside Concubines at any time
		}
	}

	is_valid_showing_failures_only = {
		custom_tooltip = {
			NOT = {
				scope:actor.culture = {
					has_cultural_parameter = cannot_divorce
				}
			}
			text = CULTURE_FORBIDS_DIVORCE
		}
		NOT = {
			scope:actor.faith = {
				has_doctrine = doctrine_divorce_disallowed
			}
		}
		scope:actor.dynasty = {
			dynasty_prestige >= minor_dynasty_prestige_value
		}

		NOT = {
			scope:secondary_actor.faith = {
				has_doctrine = doctrine_divorce_disallowed
			}
		}
		scope:secondary_actor = { is_busy_in_events_localised = yes }
		scope:secondary_actor = { NOT = { has_strong_hook = scope:actor } }
		trigger_if = {
			limit = {
				scope:secondary_actor = {
					NOR = {
						is_child_of = scope:actor
						is_grandchild_of = scope:actor
						is_great_grandchild_of = scope:actor
					}
				}
			}
			custom_description = {
				scope:secondary_actor.top_liege = scope:actor.top_liege
				text = "same_realm_as"
			}
		}
	}

	auto_accept = yes

	on_accept = {
		scope:actor = {
			send_interface_toast = {
				title = divorce_character_dynast_request_interaction_title
				custom_tooltip = divorce_character_dynast_request_interaction_desc

				left_icon = scope:secondary_actor
				right_icon = scope:recipient
			}
		}


		scope:secondary_actor = {
			divorce_effect = {
				DIVORCER = scope:secondary_actor
				DIVORCEE = scope:recipient
			}

			add_opinion = {
				modifier = forced_divorce_opinion
				target = scope:actor
			}
		}
		scope:recipient = {
			trigger_event = marriage_interaction.0030

			add_opinion = {
				modifier = forced_divorce_opinion
				target = scope:actor
			}
		}
	}
	
	# AI
	ai_targets = {
		ai_recipients = dynasty
		max = 10
	}
	ai_frequency = 72
	
	ai_potential = {
		is_ruler = yes
	}

	ai_will_do = {
		base = 0

		modifier = { # The AI wants to force a divorce if their heir is not from their dynasty and current marriage within the dynasty are not promising
			add = 100
			scope:secondary_actor = {
				fertility > 0.1
			}
			scope:recipient = {
				is_ai = yes
				fertility < 0.1
			}
			exists = scope:actor.primary_heir
			exists = scope:actor.primary_heir.dynasty
			NOT = { scope:actor.primary_heir.dynasty = this.dynasty }
		}

		#Players should not be targeted 
		modifier = {
			add = -1000
			OR = {
				scope:secondary_actor = { is_ai = no }
				scope:recipient = { is_ai = no }
			}
		}
	}
}

divorce_character_dynast_request_rel_head_interaction = {
	category = interaction_category_diplomacy
	use_diplomatic_range = no
	icon = interaction_divorce
	cost = {
		piety = divorce_cost
		renown = minor_dynasty_prestige_value
	}

	redirect = {
		scope:recipient = {
			save_scope_as = secondary_actor
		}

		if = {
			limit = {
				exists = scope:recipient.primary_spouse
			}
			scope:recipient.primary_spouse = {
				save_scope_as = secondary_recipient
			}
		}
		
		if = {
			limit = {
				exists = scope:actor.faith.religious_head
			}
			scope:actor.faith.religious_head = {
				save_scope_as = recipient
			}
		}
	}

	greeting = positive
	notification_text = ASK_FOR_DIVORCE_NOTIFICATION

	is_shown = {
		NOT = { scope:secondary_actor = scope:actor }
		scope:secondary_actor.dynasty.dynast = scope:actor
		NOT = {
			scope:secondary_actor = { is_spouse_of = scope:actor }
		}

		exists = scope:secondary_recipient

		scope:actor.faith = scope:secondary_actor.faith
		exists = scope:actor.faith.religious_head
		scope:actor.faith = {
			has_doctrine = doctrine_spiritual_head
			has_doctrine = doctrine_divorce_approval
		}
	}

	is_valid_showing_failures_only = {
		custom_tooltip = {
			NOT = {
				scope:actor.culture = {
					has_cultural_parameter = cannot_divorce
				}
			}
			text = CULTURE_FORBIDS_DIVORCE
		}
		scope:actor.dynasty = {
			dynasty_prestige >= minor_dynasty_prestige_value
		}

		scope:secondary_actor = { is_busy_in_events_localised = yes }
		scope:secondary_actor = { NOT = { has_strong_hook = scope:actor } }
		trigger_if = {
			limit = {
				scope:secondary_actor = {
					NOR = {
						is_child_of = scope:actor
						is_grandchild_of = scope:actor
						is_great_grandchild_of = scope:actor
					}
				}
			}
			custom_description = {
				scope:secondary_actor.top_liege = scope:actor.top_liege
				text = "same_realm_as"
			}
		}
	}

	ai_accept = {
		base = 0 # Should be 0 for all interactions
		
		divorce_character_ai_accept_modifier = yes

		modifier = { # Divine Family is part of the faith
			add = -100
			desc = DIVORCE_INCESTUOUS

			scope:secondary_actor = { 
				is_close_or_extended_family_of = scope:secondary_recipient
				faith = { has_doctrine = tenet_divine_marriage }
			}
		}
		
		modifier = { # More likely if the marriage is incestuous, unless Divine Family is part of the faith
			add = 100
			desc = DIVORCE_INCESTUOUS

			scope:secondary_actor = {
				relation_with_character_is_incestuous_in_my_faith_trigger = { CHARACTER = scope:secondary_recipient	}
			}
		}		
		
		modifier = { # You are of the same dynasty as the Head of Faith
			add = 5
			desc = YOU_ARE_MY_DYNASTY_MEMBER
			scope:recipient = {
				is_lowborn = no
				dynasty = scope:actor.dynasty
				NOR = {
					is_close_or_extended_family_of = scope:actor
					is_cousin_of = scope:actor
					is_child_of = scope:actor
					scope:recipient.dynasty = scope:secondary_recipient.dynasty
				}
			}
		}
		
		
		modifier = { # You are of the same house as the Head of Faith
			add = 10
			desc = YOU_ARE_MY_HOUSE_MEMBER
			scope:recipient = {
				is_lowborn = no
				house = scope:actor.house
				NOR = {
					is_close_or_extended_family_of = scope:actor
					is_cousin_of = scope:actor
					is_child_of = scope:actor
					scope:recipient.house = scope:secondary_recipient.house
				}
			}
		}
		
		modifier = { # Related to the Head of Faith
			add = 25
			desc = YOU_ARE_MY_RELATIVE
			scope:recipient = {
				OR = {
					is_close_or_extended_family_of = scope:actor
					is_cousin_of = scope:actor
				}
				NOT = { is_child_of = scope:actor }
			}
		}
		
		modifier = { # Parent of the Head of Faith
			add = 50
			desc = PARENTS #YOU_ARE_MY_PARENT
			scope:recipient = {
				is_child_of = scope:actor
			}
		}
		
		modifier = {
			add = {
				add = 10
				multiply = scope:actor.num_virtuous_traits
			}
			scope:actor.num_virtuous_traits > 0
			desc = I_AM_VIRTUOUS
		}
		
		modifier = {
			add = {
				add = -10
				multiply = scope:secondary_recipient.num_virtuous_traits
			}
			scope:secondary_recipient.num_virtuous_traits > 0
			desc = THEY_ARE_VIRTUOUS
		}
		
		modifier = {
			add = {
				add = -10
				multiply = scope:actor.num_sinful_traits
			}
			scope:actor.num_sinful_traits > 0
			desc = I_AM_SINFUL
		}
		
		modifier = {
			add = {
				add = 10
				multiply = scope:secondary_recipient.num_sinful_traits
			}
			scope:secondary_recipient.num_sinful_traits > 0
			desc = THEY_ARE_SINFUL
		}
	}
	
	auto_accept = {
		custom_description = {
			text = "spending_hook"
			subject = scope:actor
			object = scope:recipient
			scope:divorce_hook = yes
		}
	}
	
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = divorce_hook
		localization = GENERIC_SPEND_A_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	
	send_options_exclusive = no
	
	ai_min_reply_days = 1
	ai_max_reply_days = 5

	on_accept = {
		if = {
			limit = { always = scope:divorce_hook }
			scope:actor = {
				if = {
					limit = {
						has_usable_hook = scope:recipient
					}
					use_hook = scope:recipient
				}
			}
		}
		scope:actor = {
			trigger_event = religious_interaction.6
		}

		scope:secondary_actor = {
			divorce_effect = {
				DIVORCER = scope:secondary_actor
				DIVORCEE = scope:secondary_recipient
			}
			add_opinion = {
				modifier = forced_divorce_opinion
				target = scope:actor
			}
		}

		scope:secondary_recipient = {
			add_opinion = {
				modifier = forced_divorce_opinion
				target = scope:actor
			}
		}
	}

	on_decline = {
		send_interface_toast = {
			title = divorce_character_dynast_request_rel_head_interaction_decline_notification

			right_icon = scope:actor.faith.religious_head
		}
	}
	
	# AI
	ai_targets = {
		ai_recipients = dynasty
		max = 10
	}
	ai_frequency = 72
	
	ai_potential = {
		is_ruler = yes
	}

	ai_will_do = {
		base = 0

		modifier = { # The AI wants to force a divorce if their heir is not from their dynasty and current marriage within the dynasty are not promising
			add = 100
			scope:secondary_actor = {
				fertility > 0.1
			}
			scope:secondary_recipient = {
				is_ai = yes
				fertility < 0.1
			}
			exists = scope:actor.primary_heir
			exists = scope:actor.primary_heir.dynasty
			NOT = { scope:actor.primary_heir.dynasty = this.dynasty }
		}
		
		modifier = { # The AI will only use a Hook if they couldn't otherwise do this
			scope:divorce_hook = yes
			add = -1
		}

		#Players should not be targeted 
		modifier = {
			add = -1000
			OR = {
				scope:secondary_actor = { is_ai = no }
				scope:secondary_recipient = { is_ai = no }
			}
		}
	}	
}
